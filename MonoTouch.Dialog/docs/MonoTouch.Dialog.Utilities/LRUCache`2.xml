<Type Name="LRUCache&lt;TKey,TValue&gt;" FullName="MonoTouch.Dialog.Utilities.LRUCache&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public class LRUCache&lt;TKey,TValue&gt; where TValue : class, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LRUCache`2&lt;TKey, class (class System.IDisposable) TValue&gt; extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.Dialog-1</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
        <InterfaceName>System.IDisposable</InterfaceName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TKey">The type of key for the LRU cache.</typeparam>
    <typeparam name="TValue">The type for the values of the LRU cache.</typeparam>
    <summary>Implements a Least Recently Used Cache</summary>
    <remarks></remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LRUCache (int entryLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 entryLimit) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entryLimit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="entryLimit">Maximum number of entries on the LRU cache.</param>
        <summary>Constructs a new instance of the LRU cache with a limit based on the number of slots in the cache.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LRUCache (int entryLimit, int sizeLimit, Func&lt;TValue,int&gt; slotSizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 entryLimit, int32 sizeLimit, class System.Func`2&lt;!TValue, int32&gt; slotSizer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="entryLimit" Type="System.Int32" />
        <Parameter Name="sizeLimit" Type="System.Int32" />
        <Parameter Name="slotSizer" Type="System.Func&lt;TValue,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="entryLimit">Maximum number of entries on the LRU cache.</param>
        <param name="sizeLimit">Maximum amount of bytes to keep in memory.</param>
        <param name="slotSizer">Function that returns the amount of memory that an object of the specified value holds.</param>
        <summary>Constructs a new instance of the LRU cache with a limit based on the number of slots and a memory size limit.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">Key to lookup</param>
        <summary>Retrieves or sets value in the LRU cache</summary>
        <value></value>
        <remarks>
	  <para>
	    When getting a value, it will returns null if the value was not found on the cache.
	  </para>
	  <para>

	    When setting a value if the key was already in the cache,
	    the entry is flagged as recently used.  If not, the key is
	    added as the most recently used key.  Adding a new key to
	    the cache might cause existing values in the cache to be
	    Disposed, either because of the limit of active entries
	    has been exceeded or because the total amount of byte has
	    been exceeded.
	  </para>

	</remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Purge() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Purges the cache, and calls Dispose on all of the elements of the cache.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary></summary>
        <returns></returns>
        <remarks></remarks>
      </Docs>
    </Member>
  </Members>
</Type>
